/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5834612698935651805L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"favouriteNumber\",\"type\":[\"int\",\"null\"]},{\"name\":\"favouriteColour\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence id;
  @Deprecated public CharSequence name;
  @Deprecated public Integer favouriteNumber;
  @Deprecated public CharSequence favouriteColour;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param favouriteNumber The new value for favouriteNumber
   * @param favouriteColour The new value for favouriteColour
   */
  public User(CharSequence id, CharSequence name, Integer favouriteNumber, CharSequence favouriteColour) {
    this.id = id;
    this.name = name;
    this.favouriteNumber = favouriteNumber;
    this.favouriteColour = favouriteColour;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return favouriteNumber;
    case 3: return favouriteColour;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: name = (CharSequence)value$; break;
    case 2: favouriteNumber = (Integer)value$; break;
    case 3: favouriteColour = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'favouriteNumber' field.
   * @return The value of the 'favouriteNumber' field.
   */
  public Integer getFavouriteNumber() {
    return favouriteNumber;
  }

  /**
   * Sets the value of the 'favouriteNumber' field.
   * @param value the value to set.
   */
  public void setFavouriteNumber(Integer value) {
    this.favouriteNumber = value;
  }

  /**
   * Gets the value of the 'favouriteColour' field.
   * @return The value of the 'favouriteColour' field.
   */
  public CharSequence getFavouriteColour() {
    return favouriteColour;
  }

  /**
   * Sets the value of the 'favouriteColour' field.
   * @param value the value to set.
   */
  public void setFavouriteColour(CharSequence value) {
    this.favouriteColour = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static Builder newBuilder(User other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private CharSequence id;
    private CharSequence name;
    private Integer favouriteNumber;
    private CharSequence favouriteColour;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.favouriteNumber)) {
        this.favouriteNumber = data().deepCopy(fields()[2].schema(), other.favouriteNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favouriteColour)) {
        this.favouriteColour = data().deepCopy(fields()[3].schema(), other.favouriteColour);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.favouriteNumber)) {
        this.favouriteNumber = data().deepCopy(fields()[2].schema(), other.favouriteNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favouriteColour)) {
        this.favouriteColour = data().deepCopy(fields()[3].schema(), other.favouriteColour);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'favouriteNumber' field.
      * @return The value.
      */
    public Integer getFavouriteNumber() {
      return favouriteNumber;
    }

    /**
      * Sets the value of the 'favouriteNumber' field.
      * @param value The value of 'favouriteNumber'.
      * @return This builder.
      */
    public Builder setFavouriteNumber(Integer value) {
      validate(fields()[2], value);
      this.favouriteNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'favouriteNumber' field has been set.
      * @return True if the 'favouriteNumber' field has been set, false otherwise.
      */
    public boolean hasFavouriteNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'favouriteNumber' field.
      * @return This builder.
      */
    public Builder clearFavouriteNumber() {
      favouriteNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'favouriteColour' field.
      * @return The value.
      */
    public CharSequence getFavouriteColour() {
      return favouriteColour;
    }

    /**
      * Sets the value of the 'favouriteColour' field.
      * @param value The value of 'favouriteColour'.
      * @return This builder.
      */
    public Builder setFavouriteColour(CharSequence value) {
      validate(fields()[3], value);
      this.favouriteColour = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'favouriteColour' field has been set.
      * @return True if the 'favouriteColour' field has been set, false otherwise.
      */
    public boolean hasFavouriteColour() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'favouriteColour' field.
      * @return This builder.
      */
    public Builder clearFavouriteColour() {
      favouriteColour = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (CharSequence) defaultValue(fields()[1]);
        record.favouriteNumber = fieldSetFlags()[2] ? this.favouriteNumber : (Integer) defaultValue(fields()[2]);
        record.favouriteColour = fieldSetFlags()[3] ? this.favouriteColour : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
